'use strict';

const test = require('tape');
const isDate = require('./');
const hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

test('not Dates', t => {
    t.notOk(isDate(), 'undefined is not Date');
    t.notOk(isDate(null), 'null is not Date');
    t.notOk(isDate(false), 'false is not Date');
    t.notOk(isDate(true), 'true is not Date');
    t.notOk(isDate(42), 'number is not Date');
    t.notOk(isDate('foo'), 'string is not Date');
    t.notOk(isDate([]), 'array is not Date');
    t.notOk(isDate({}), 'object is not Date');
    t.notOk(isDate(() => {}), 'function is not Date');
    t.notOk(isDate(/a/g), 'regex literal is not Date');
    t.notOk(isDate(new RegExp('a', 'g')), 'regex object is not Date');
    t.end();
});

test('@@toStringTag', { skip: !hasSymbols || !Symbol.toStringTag }, t => {
    const realDate = new Date();
    const fakeDate = {
        toString() {
            return String(realDate);
        },
        valueOf() {
            return realDate.getTime();
        },
    };
    fakeDate[Symbol.toStringTag] = 'Date';
    t.notOk(
        isDate(fakeDate),
        'fake Date with @@toStringTag "Date" is not Date'
    );
    t.end();
});

test('Dates', t => {
    t.ok(isDate(new Date()), 'new Date() is Date');
    t.end();
});
