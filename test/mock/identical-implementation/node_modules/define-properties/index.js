'use strict';

const keys = require('object-keys');
const foreach = require('foreach');
const hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

const toStr = Object.prototype.toString;

const isFunction = function(fn) {
    return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

const arePropertyDescriptorsSupported = function() {
    const obj = {};
    try {
        Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (const _ in obj) {
            return false;
        }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
        return obj.x === obj;
    } catch (e) {
        /* this is IE 8. */
        return false;
    }
};
const supportsDescriptors =
    Object.defineProperty && arePropertyDescriptorsSupported();

const defineProperty = function(object, name, value, predicate) {
    if (name in object && (!isFunction(predicate) || !predicate())) {
        return;
    }
    if (supportsDescriptors) {
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            value,
            writable: true,
        });
    } else {
        object[name] = value;
    }
};

const defineProperties = function(object, map) {
    const predicates = arguments.length > 2 ? arguments[2] : {};
    let props = keys(map);
    if (hasSymbols) {
        props = props.concat(Object.getOwnPropertySymbols(map));
    }
    foreach(props, name => {
        defineProperty(object, name, map[name], predicates[name]);
    });
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;
