'use strict';

// modified from https://github.com/es-shims/es5-shim
const has = Object.prototype.hasOwnProperty;
const toStr = Object.prototype.toString;
const slice = Array.prototype.slice;
const isArgs = require('./isArguments');
const isEnumerable = Object.prototype.propertyIsEnumerable;
const hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
const hasProtoEnumBug = isEnumerable.call(() => {}, 'prototype');
const dontEnums = [
    'toString',
    'toLocaleString',
    'valueOf',
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'constructor',
];
const equalsConstructorPrototype = function(o) {
    const ctor = o.constructor;
    return ctor && ctor.prototype === o;
};
const excludedKeys = {
    $console: true,
    $external: true,
    $frame: true,
    $frameElement: true,
    $frames: true,
    $innerHeight: true,
    $innerWidth: true,
    $outerHeight: true,
    $outerWidth: true,
    $pageXOffset: true,
    $pageYOffset: true,
    $parent: true,
    $scrollLeft: true,
    $scrollTop: true,
    $scrollX: true,
    $scrollY: true,
    $self: true,
    $webkitIndexedDB: true,
    $webkitStorageInfo: true,
    $window: true,
};
const hasAutomationEqualityBug = (function() {
    /* global window */
    if (typeof window === 'undefined') {
        return false;
    }
    for (const k in window) {
        try {
            if (
                !excludedKeys[`$${k}`] &&
                has.call(window, k) &&
                window[k] !== null &&
                typeof window[k] === 'object'
            ) {
                try {
                    equalsConstructorPrototype(window[k]);
                } catch (e) {
                    return true;
                }
            }
        } catch (e) {
            return true;
        }
    }
    return false;
})();
const equalsConstructorPrototypeIfNotBuggy = function(o) {
    /* global window */
    if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
        return equalsConstructorPrototype(o);
    }
    try {
        return equalsConstructorPrototype(o);
    } catch (e) {
        return false;
    }
};

const keysShim = function keys(object) {
    const isObject = object !== null && typeof object === 'object';
    const isFunction = toStr.call(object) === '[object Function]';
    const isArguments = isArgs(object);
    const isString = isObject && toStr.call(object) === '[object String]';
    const theKeys = [];

    if (!isObject && !isFunction && !isArguments) {
        throw new TypeError('Object.keys called on a non-object');
    }

    const skipProto = hasProtoEnumBug && isFunction;
    if (isString && object.length > 0 && !has.call(object, 0)) {
        for (let i = 0; i < object.length; ++i) {
            theKeys.push(String(i));
        }
    }

    if (isArguments && object.length > 0) {
        for (let j = 0; j < object.length; ++j) {
            theKeys.push(String(j));
        }
    } else {
        for (const name in object) {
            if (
                !(skipProto && name === 'prototype') &&
                has.call(object, name)
            ) {
                theKeys.push(String(name));
            }
        }
    }

    if (hasDontEnumBug) {
        const skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

        for (let k = 0; k < dontEnums.length; ++k) {
            if (
                !(skipConstructor && dontEnums[k] === 'constructor') &&
                has.call(object, dontEnums[k])
            ) {
                theKeys.push(dontEnums[k]);
            }
        }
    }
    return theKeys;
};

keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
        const keysWorksWithArguments = (function() {
            // Safari 5.0 bug
            return (Object.keys(arguments) || '').length === 2;
        })(1, 2);
        if (!keysWorksWithArguments) {
            const originalKeys = Object.keys;
            Object.keys = function keys(object) {
                if (isArgs(object)) {
                    return originalKeys(slice.call(object));
                } else {
                    return originalKeys(object);
                }
            };
        }
    } else {
        Object.keys = keysShim;
    }
    return Object.keys || keysShim;
};

module.exports = keysShim;
