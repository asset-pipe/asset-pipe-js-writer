'use strict';

const hasSymbols =
    typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

const coercibleObject = {
    valueOf() {
        return 3;
    },
    toString() {
        return 42;
    },
};
const valueOfOnlyObject = {
    valueOf() {
        return 4;
    },
    toString() {
        return {};
    },
};
const toStringOnlyObject = {
    valueOf() {
        return {};
    },
    toString() {
        return 7;
    },
};
const uncoercibleObject = {
    valueOf() {
        return {};
    },
    toString() {
        return {};
    },
};
const objects = [{}, coercibleObject, toStringOnlyObject, valueOfOnlyObject];
const nullPrimitives = [undefined, null];
const nonIntegerNumbers = [-1.3, 0.2, 1.8, 1 / 3];
const numbers = [0, -0, Infinity, -Infinity, 42];
const strings = ['', 'foo'];
const booleans = [true, false];
const symbols = hasSymbols ? [Symbol.iterator, Symbol('foo')] : [];
const nonSymbolPrimitives = [].concat(
    nullPrimitives,
    booleans,
    strings,
    numbers
);
const nonNumberPrimitives = [].concat(
    nullPrimitives,
    booleans,
    strings,
    symbols
);
const nonNullPrimitives = [].concat(booleans, strings, numbers, symbols);
const nonUndefinedPrimitives = [].concat(null, nonNullPrimitives);
const nonStrings = [].concat(
    nullPrimitives,
    booleans,
    numbers,
    symbols,
    objects
);
const primitives = [].concat(nullPrimitives, nonNullPrimitives);
const nonPropertyKeys = [].concat(nullPrimitives, booleans, numbers, objects);
const propertyKeys = [].concat(strings, symbols);
const nonBooleans = [].concat(
    nullPrimitives,
    strings,
    symbols,
    numbers,
    objects
);
const falsies = [].concat(nullPrimitives, false, '', 0, -0, NaN);
const truthies = [].concat(true, 'foo', 42, symbols, objects);

module.exports = {
    coercibleObject,
    valueOfOnlyObject,
    toStringOnlyObject,
    uncoercibleObject,
    objects,
    nullPrimitives,
    numbers,
    strings,
    booleans,
    symbols,
    hasSymbols,
    nonSymbolPrimitives,
    nonNumberPrimitives,
    nonNullPrimitives,
    nonUndefinedPrimitives,
    nonStrings,
    nonNumbers: nonNumberPrimitives.concat(objects),
    nonIntegerNumbers,
    primitives,
    nonPropertyKeys,
    propertyKeys,
    nonBooleans,
    falsies,
    truthies,
};
