'use strict';

const fnToStr = Function.prototype.toString;

const constructorRegex = /^\s*class /;
const isES6ClassFn = function isES6ClassFn(value) {
    try {
        const fnStr = fnToStr.call(value);
        const singleStripped = fnStr.replace(/\/\/.*\n/g, '');
        const multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
        const spaceStripped = multiStripped
            .replace(/\n/gm, ' ')
            .replace(/ {2}/g, ' ');
        return constructorRegex.test(spaceStripped);
    } catch (e) {
        return false; // not a function
    }
};

const tryFunctionObject = function tryFunctionObject(value) {
    try {
        if (isES6ClassFn(value)) {
            return false;
        }
        fnToStr.call(value);
        return true;
    } catch (e) {
        return false;
    }
};
const toStr = Object.prototype.toString;
const fnClass = '[object Function]';
const genClass = '[object GeneratorFunction]';
const hasToStringTag =
    typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
    if (!value) {
        return false;
    }
    if (typeof value !== 'function' && typeof value !== 'object') {
        return false;
    }
    if (hasToStringTag) {
        return tryFunctionObject(value);
    }
    if (isES6ClassFn(value)) {
        return false;
    }
    const strClass = toStr.call(value);
    return strClass === fnClass || strClass === genClass;
};
